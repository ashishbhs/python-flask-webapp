import fitz  # PyMuPDF
import pdfplumber
import re
import os

def extract_text_kv(pdf_path):
    doc = fitz.open(pdf_path)
    kv_pairs = []
    for page in doc:
        text = page.get_text()
        pairs = re.findall(r'([\w\s]+?)\s*:\s*([\w\s]+)', text)
        kv_pairs.extend([(k.strip(), v.strip()) for k, v in pairs])
    return kv_pairs

def extract_table_dicts(pdf_path):
    all_rows = []
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            tables = page.extract_tables()
            for table in tables:
                if not table:
                    continue
                headers = table[0]
                for row in table[1:]:
                    if len(row) == len(headers):
                        row_dict = {headers[i].strip(): row[i].strip() if row[i] else "" for i in range(len(headers))}
                        all_rows.append(row_dict)
    return all_rows

def extract_checkbox_fields(pdf_path):
    doc = fitz.open(pdf_path)
    checkbox_data = []
    for page in doc:
        widgets = page.widgets()
        for widget in widgets:
            if widget.field_type == fitz.PDF_WIDGET_TYPE_CHECKBOX:
                label = widget.field_name or "Unnamed"
                value = widget.field_value
                checkbox_data.append((label, "‚òëÔ∏è Checked" if value == "Yes" else "‚¨ú Unchecked"))
    return checkbox_data

def extract_all(pdf_path):
    print(f"üìÑ Processing PDF: {pdf_path}")

    text_kv = extract_text_kv(pdf_path)
    print(f"‚úÖ Text-based key-value pairs: {len(text_kv)}")

    table_data = extract_table_dicts(pdf_path)
    print(f"‚úÖ Structured table rows: {len(table_data)}")

    checkbox_kv = extract_checkbox_fields(pdf_path)
    print(f"‚úÖ Checkbox fields: {len(checkbox_kv)}")

    print("\nüßæ Extracted Key-Value Pairs:")
    for key, value in text_kv + checkbox_kv:
        print(f"{key} -> {value}")

    print("\nüìä Extracted Table Rows:")
    for i, row in enumerate(table_data, 1):
        print(f"Row {i}: {row}")

    return text_kv, table_data, checkbox_kv

if __name__ == "__main__":
    pdf_file = "your_form.pdf"
    if os.path.exists(pdf_file):
        extract_all(pdf_file)
    else:
        print("‚ùå PDF file not found. Update the 'pdf_file' path.")
