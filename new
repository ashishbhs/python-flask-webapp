import re
import json
import PyPDF2

def extract_text_from_pdf(pdf_path):
    """Extract raw text from a text-based PDF."""
    try:
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            text = ""
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
            return text
    except Exception as e:
        print(f"Error reading PDF: {e}")
        return None

def extract_form_data(raw_text):
    """Parse raw text to extract question-answer pairs from tables and user-entered boxes."""
    result = {}
    
    # Normalize text: replace multiple spaces/tabs with single space, remove extra newlines
    normalized_text = re.sub(r'\s+', ' ', raw_text).strip()
    
    # Patterns to match various formats:
    # 1. "Question: Answer" or "Question - Answer"
    # 2. Table-like: "Question Answer" (separated by spaces, assuming table columns)
    # 3. User-entered boxes: "Question [Answer]" or "Question {Answer}"
    patterns = [
        r'(\d*\.?\s?[^:?-]+?)\s*[:|-]\s*([^\n]+)',  # Question: Answer
        r'(\d*\.?\s?[^:\[\{]+?)\s*\[\s*([^\]\n]+)\s*\]',  # Question [Answer]
        r'(\d*\.?\s?[^:\[\{]+?)\s*\{\s*([^\}\n]+)\s*\}',  # Question {Answer}
        r'(\d*\.?\s?[^:?\s][^\n]+?)\s{2,}(\S[^\n]+)'  # Table: Question  Answer (multiple spaces)
    ]
    
    # Try each pattern to extract question-answer pairs
    for pattern in patterns:
        matches = re.findall(pattern, normalized_text, re.MULTILINE)
        for question, answer in matches:
            # Clean question and answer
            question = question.strip()
            answer = answer.strip()
            
            # Normalize question to use as a key
            key = re.sub(r'^\d*\.?\s*', '', question).lower().replace(' ', '_').replace('?', '')
            
            # Store in dictionary (skip if key already exists to avoid duplicates)
            if key not in result:
                result[key] = answer
    
    return result

# Example usage
if __name__ == "__main__":
    # Path to your PDF file
    pdf_path = "path/to/your/form.pdf"  # Replace with your PDF file path
    
    # Extract raw text from PDF
    raw_text = extract_text_from_pdf(pdf_path)
    
    if raw_text:
        # Extract key-value pairs
        data = extract_form_data(raw_text)
        
        # Print raw text for debugging
        print("Raw Text Extracted from PDF:")
        print(raw_text)
        print("\nExtracted Key-Value Pairs:")
        print(json.dumps(data, indent=2))
    else:
        print("Failed to extract text from PDF.")
