import re
import json
from spire.pdf import PdfDocument, PdfTableExtractor, PdfFormWidget

def extract_form_fields(pdf):
    """Extract data from user-enterable form fields (e.g., text boxes, checkboxes)."""
    result = {}
    try:
        # Get the PDF form
        form = PdfFormWidget(pdf.Form)
        if form.IsAvailable():
            for i in range(form.FieldsWidget.Count):
                field = form.FieldsWidget.get_Item(i)
                field_name = field.Name.strip()
                field_value = field.Value if field.Value else ""
                if field_name and field_value:  # Only include non-empty fields
                    # Normalize field name to use as a key
                    key = re.sub(r'[^a-zA-Z0-9\s]', '', field_name).lower().replace(' ', '_')
                    result[key] = field_value.strip()
    except Exception as e:
        print(f"Error extracting form fields: {e}")
    return result

def extract_table_data(pdf):
    """Extract data from tables and attempt to form key-value pairs."""
    result = {}
    try:
        extractor = PdfTableExtractor(pdf)
        for page_index in range(pdf.Pages.Count):
            page = pdf.Pages[page_index]
            tables = extractor.ExtractTable(page_index)
            if tables is not None:
                for table_index, table in enumerate(tables):
                    row_count = table.GetRowCount()
                    col_count = table.GetColumnCount()
                    
                    # Assume first row or column contains labels (questions)
                    # Try row-based tables (labels in first column)
                    for row in range(row_count):
                        if col_count > 1:  # Ensure at least 2 columns for key-value
                            key = table.GetText(row, 0).strip()
                            value = table.GetText(row, 1).strip() if col_count > 1 else ""
                            if key and value:  # Only include non-empty pairs
                                # Normalize key
                                key = re.sub(r'^\d*\.?\s*', '', key).lower().replace(' ', '_').replace('?', '')
                                result[key] = value
                        
                    # Try column-based tables (labels in first row)
                    if row_count > 1:  # Ensure at least 2 rows for header and data
                        for col in range(col_count):
                            key = table.GetText(0, col).strip()
                            value = table.GetText(1, col).strip() if row_count > 1 else ""
                            if key and value:  # Only include non-empty pairs
                                # Normalize key
                                key = re.sub(r'^\d*\.?\s*', '', key).lower().replace(' ', '_').replace('?', '')
                                result[key] = value
    except Exception as e:
        print(f"Error extracting table data: {e}")
    return result

def extract_form_data(pdf_path):
    """Extract key-value pairs from form fields and tables in a PDF."""
    result = {}
    
    # Load the PDF document
    pdf = PdfDocument()
    try:
        pdf.LoadFromFile(pdf_path)
        
        # Extract form fields (user-enterable boxes)
        form_data = extract_form_fields(pdf)
        result.update(form_data)
        
        # Extract table data
        table_data = extract_table_data(pdf)
        result.update(table_data)
        
    except Exception as e:
        print(f"Error processing PDF: {e}")
    finally:
        pdf.Close()
    
    return result

# Example usage
if __name__ == "__main__":
    # Path to your PDF file
    pdf_path = "path/to/your/form.pdf"  # Replace with your PDF file path
    
    # Extract key-value pairs
    data = extract_form_data(pdf_path)
    
    # Print extracted key-value pairs
    print("Extracted Key-Value Pairs:")
    print(json.dumps(data, indent=2))
